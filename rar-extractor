#!/bin/bash

# In "Parent Folder" there are many folders each one contains rar files
# This script extracts each rar (contains a big file and other small ones)
# rename the biggest file using the folder'sname
# and move it to another directory

parentDir=${1%/}
destDir=${2%/}
tempDir="/tmp/mre-$RANDOM.$$"

# Colors
C_BLK="\x1b[30;01m" # black
C_RED="\x1b[31;01m" # red
C_GRN="\x1b[32;01m" # green
C_YEL="\x1b[33;01m" # yellow
C_BLU="\x1b[34;01m" # blue
C_MAG="\x1b[35;01m" # magenta
C_CYN="\x1b[36;01m" # cyan
C_WHI="\x1b[37;01m" # white
C_END="\x1b[0m"     # Cancel

# Cas where destDir == parentDir
[[ $# == 1 ]] && destDir="$parentDir"

# Error message file
EFILE=$(mktemp)
LFILE="$destDir/error.log"

# Constants
ERR="errfile"
LOG="errlog"

# print: [color string] | [string]
function print {
    echo -e " "$1$2$3$4$5$C_END
}

function log {
    echo -e "$1$2$3$4$5" >> "$LFILE"
}

function error {
    typeset MSG log

    for arg in "$@"; do
        { [[ "$arg" != "$LOG" ]] && MSG="${MSG}$arg "; } || log="$LOG"
    done

    [[ "$log" == "$LOG" ]] && log "$(echo "$MSG" | tr "\n" " " | \
        sed -r -e 's/[ ]+[-][ ]+CRC/ - CRC/' -e 's/[ ]+(\<[^ ]+[ ][-][ ]+CRC.*\>)/ <<=== [ \1 ]/ ')"
    print $C_RED " Error! $MSG"
}

# New line
function newline {
    echo -e ""
}

function quit {
    newline; rm -R $EFILE; exit;
}

function die {
    typeset log ERROR=$(sed -r -e 's|^.*line [0-9:\ ]+||' < "$EFILE")

    for arg in "$@"; do
        [[ "$arg" == "$LOG" ]] && log=$LOG
    done

    [[ $# == 0 || $# == 1 && "$log" == "$LOG" ]] && error $log "$ERROR"

    for arg in "$@"; do
        [[ "$arg" != "$LOG" ]] && ( ([[ "$arg" == "$ERR" ]] && error $log "$ERROR") || error $log "$arg")
    done

    [[ "$log" == "$LOG" ]] && log ""

    quit;
}

# Show greetings
newline
print $C_BLU "-----------------------------------------------------------------------------"
print $C_BLU "- " $C_MAG "Rar Extractor. Version 1.0"
print $C_BLU "-----------------------------------------------------------------------------"

# Check parameters
[[ $# < 1 ]] && {
    print $C_WHI "Usage:";
    print $C_WHI " rar-extractor /parent/dir";
    print $C_WHI " rar-extractor /parent/dir /dest/dir";
} && quit

# Check if parent directory exists
[ -d "$parentDir" ] || die "Parent directory doesn't exist: $parentDir"

# Change current directory
cd "$parentDir" 2> "$EFILE" || die

# Create destination directory
[ -d "$destDir" ] || mkdir "$destDir" 2> "$EFILE" || die "Destination directory: $destDir" $ERR

# Create temporary directory
[ -d "$tempDir" ] || mkdir "$tempDir" 2> "$EFILE" || die "Temporary directory: $tempDir" $ERR

# Remove log file if exists
[ -e  "$LFILE" ] && { rm "$LFILE" 2> "$EFILE" || die "Cannot remove: $EFILE"; }

# Show parent directory
print $C_BLU " Parent dir: $parentDir"
newline

# Any glob ending in '/' will only expand to directories
for dir in ./*/; do
    # trim the '/' from the end of the dir
    dir=${dir%/}
    print $C_YEL " + Folder: $(basename "$dir") ..."

    # commands within (...) are run in a subshell. that means assignments
    # and changes in the working dir will not persist afterwards. I'm using
    # subshells, so I don't have to worry about finding my way back out
    (
        # Change current directory
        cd "$dir" 2> "$EFILE" || die

        # Unrar
        unrar -o+ x *.rar "$tempDir" > /dev/null 2> "$EFILE" || die $LOG "In folder: $parentDir/$(basename "$dir")" $ERR
        (
            cd "$tempDir" 2> "$EFILE" || die

            # this will safely get the size of the biggest filename, even if it
            # has newlines or any other special character in it
            {
                read -rd ' ' size
                IFS= read -rd '' big
            } < <(stat --printf='%s %n\0' ./* | sort -znr)

            # /msg greybot faq 100 for more info on string manipulations in bash
            ext=${big##*.}
            print $C_GRN " ++ File: $destDir/$(basename "$dir").$ext"

            mv "$big" "$destDir/$dir.$ext" 2> "$EFILE" || die
        )

        newline
    )
done

# Done
print $C_BLU "-----------------------------------------------------------------------------"
{ [[ -e "$LFILE" ]] && print $C_MAG "- " $C_RED "For overview of errors, look: $LFILE"; } \
    || print $C_BLU "- " $C_MAG "Done ;-)"
print $C_BLU "-----------------------------------------------------------------------------"

# Exit program
rm -R $tempDir
quit